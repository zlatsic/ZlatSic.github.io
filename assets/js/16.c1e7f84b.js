(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{297:function(e,t,n){"use strict";n.r(t);var o=n(14),i=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"frontmatter-title"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),t("p",[e._v("Near the end of 2018, I had a conversation with a developer friend where we\ntalked about the editors we use to do our jobs. At the time, I was a devoted\nVSCode user, and was perfectly happy with my setup. He, on the other side, was\npitching Vim. This got me curious, so I installed a VSCode plugin that\n"),t("a",{attrs:{href:"https://github.com/VSCodeVim/Vim",target:"_blank",rel:"noopener noreferrer"}},[e._v("emulates Vim in the editor"),t("OutboundLink")],1),e._v(". The plugin\nworked well (for a start) and it got me intrigued with how different writing\nsoftware can be when you exclude the mouse. At that moment, I decided to\nchallenge myself - I'm ditching the mouse in 2019.")]),e._v(" "),t("p",[e._v("Kind of. I can't really ditch it completely since I sometimes develop web\napplications and mouse is vital to any kind of UX testing. Also, my window\nmanager can be somewhat inefficient when used without mouse. In any case, in\nthis article I will cover some of the main technologies I use today. I might\nupdate the article in case I switch to something else.")]),e._v(" "),t("h1",{attrs:{id:"window-manager"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#window-manager"}},[e._v("#")]),e._v(" Window manager")]),e._v(" "),t("p",[e._v("The operating system I use at the moment is Linux Mint 19. I mostly use it\nsince I'm familiar with the Mint's user interface and feel comfortable working\nwith it. For the window manager I use "),t("a",{attrs:{href:"https://xfce.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Xfce"),t("OutboundLink")],1),e._v(". I'm content\nwith it as it's quite light-weight and customizable, unlike Cinnamon I used in\nthe past.")]),e._v(" "),t("p",[e._v("Window manager is somewhat important when it comes to my mouseless setup, since\nI need to be as efficient as possible when moving windows. Xfce, by default,\ndoes this well to a certain extent. When combining some F keys and Alt, you can\nminimize, maximize, restore, move and resize the windows. These commands work\nwell, but I found that they can be slow to use. For instance, if you wanted to\nmove a window, you'd have to press Alt+F7 and then use the arrow keys to move\nthe window to the desired location. The problem I had with this command was\nthat movement ticks of the window were too small, making the movement very\nslow. For this reason, I installed an additional tool,\n"),t("a",{attrs:{href:"https://linux.die.net/man/1/wmctrl",target:"_blank",rel:"noopener noreferrer"}},[e._v("wmctrl"),t("OutboundLink")],1),e._v(", to implement my own scripts for\nwindow management I would later assign to different keyboard shortcuts. My main\nuse case when moving a window is to move it to the next monitor, so I found a\n"),t("a",{attrs:{href:"https://github.com/jc00ke/move-to-next-monitor",target:"_blank",rel:"noopener noreferrer"}},[e._v("script"),t("OutboundLink")],1),e._v(" online that implements\nthat behaviour, slightly modified it to my needs, and am using it now instead\nof Alt+F7.")]),e._v(" "),t("p",[e._v("Overall, I'm mostly happy with Xfce. There are some problems like lack of\nkeyboard access to the panels and the settings panes are also hard to control\nwithout the mouse. Most of the times when I use a mouse, it's in one of these\nsituations. Still, these cases are somewhat rare, so I wouldn't say that I'm\nviolating my New Year's resolution.")]),e._v(" "),t("h1",{attrs:{id:"browser"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#browser"}},[e._v("#")]),e._v(" Browser")]),e._v(" "),t("p",[e._v("Using the browser is a large part of my job. After all, that's where the\nStackOverflow is. Because of this, it can be a bit tough to just ditch your\nmouse and use arrow keys to scroll and mash tab until you get to the link you'd\nnormally just click. I'm not too familiar with how other browsers handle this,\nbut Chromium is not too cooperative.")]),e._v(" "),t("p",[e._v("Enter "),t("a",{attrs:{href:"https://github.com/philc/vimium",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vimium"),t("OutboundLink")],1),e._v(". Vimum is a Chrome plugin that\ndoes multiple adjustments allowing you more keyboard control (using Vim-like\nkeyboard shortcuts). Some of these adjustments are:")]),e._v(" "),t("ul",[t("li",[e._v("Vertical and horizontal scrolling with h, j, k, l.")]),e._v(" "),t("li",[e._v("Opening, switching and closing tabs. Accessing bookmarks and address bar.")]),e._v(" "),t("li",[e._v("Visual mode for text selection.")]),e._v(" "),t("li",[e._v("Pressing f finds all clickable items like links or input fields on the page\nand shows unique character combinations next to them. When you input the\ncombinations, it acts as if you have clicked the item.")])]),e._v(" "),t("p",[e._v("All these key combinations can be configured in the plugin settings. There's\nprobably more actions it allows, but this is what I mostly use on day-to-day\nbasis.")]),e._v(" "),t("p",[e._v("Vimium is quite neat, but I did, however, find some disadvantages to using it.\nOne of the problems is that the keyboard shortcuts are similar to Vim's, but\nthere are small differences. When you start using Vim, you learn a lot of these\nshortcuts only to discover that they don't work in your browser, or even worse,\nthey do something different. However, this is more of a small pet peeve instead\nof a problem since all the shortcuts are configurable and can even override\nbrowser actions. The largest problem I had was with scrolling in cases when\nthere are more scrollbars on the screen. Vimium offers a \"next frame\" shortcut,\nbut that doesn't always work. In these cases I was forced to use my mouse.\nAnother annoyance were input fields - I'd often try scrolling the page and\nwondering why doesn't it move until I'd see \"jjjjjjjkjjjkjjkkkkkjkjj\" written\nin an auto-focused input field. Again - technically not Vimium's fault, but  it\ndoes mess with the experience.")]),e._v(" "),t("p",[e._v("Vimium has it's disadvantages, but they are all relevant in very specific\ncorner cases. It still has the best keyboard-based browser control I've ever\nseen and I recommend installing it even if you didn't make any ridiculous New\nYear's resolutions since it doesn't interfere with your vanilla browser\nexperience.")]),e._v(" "),t("h1",{attrs:{id:"mail-client"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mail-client"}},[e._v("#")]),e._v(" Mail client")]),e._v(" "),t("p",[e._v("This is the latest addition to the company of the mouseless tools I use. It\nwould be logical to assume I can just use web mail services through my\nVimiumized browser. Well, a small number of webpages doesn't work well with\nVimium. Luckily for me, Outlook's web mail service is one of those pages, so I\nhad to come up with a different solution. After a little searching I stumbled\nupon a Reddit thread about terminal based e-mail clients where a lot of people\nrecommended using "),t("a",{attrs:{href:"http://www.mutt.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("mutt"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Mutt is a terminal based e-mail client that is highly configurable and,\nhonestly, a bit tough to set up. However, the documentation is very detailed\nand well written, so you should be able to configure everything if you follow\nit properly. Or you can be like me and just use the dotfiles you found online.\nJokes aside, there are some pretty comprehensive configurations out there and\nseeing examples can help you figure things out if you get stuck on the\ndocumentation, just make sure you understand everything that is written in the\nconfiguration you downloaded.")]),e._v(" "),t("p",[e._v("When using mutt for the first time, user could be confused since the controls\nare different from other terminal based programs like Vim. They are, however,\neasy to get used to since there's not a lot of them. They can also be changed\nin the configuration. Cool thing about mutt is that it forces it's controls on\nyou only when reading e-mails. When you want to compose a new message, you can\nwrite your e-mails in you favourite editor. You can also assign commands to\nMIME types depending on which programs you'd like to open them in. That way I\ncan, for instance, assign the type "),t("code",[e._v("text/html")]),e._v(" to Chromium and open the e-mails\nin the browser.")]),e._v(" "),t("p",[e._v("I was pretty satisfied with mutt after I've passed the initial learning curve.\nOne thing I was dissatisfied with was that the community was quite small and\nthat it was difficult to search for solutions when I'd get stuck (the fact that\nthe name of the program is a somewhat common English word didn't help either).\nAlso I haven't even started trying to use the calendar features. Overall, I\ncouldn't find a better alternative to it, so I'd recommend mutt mostly if you'd\nlike to learn better how e-mail clients work or you made a silly New Years\nresolution.")]),e._v(" "),t("h1",{attrs:{id:"editor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#editor"}},[e._v("#")]),e._v(" Editor")]),e._v(" "),t("p",[e._v("Like I said in the introduction, when I embarked on this journey I was a VSCode\nenthusiast. I'd still recommend it to anyone who needs a plugable code editor\nor a visual debugger. The amount of maintenence and support that Microsoft puts\ninto it really pays off. When it comes to mouseless control, VSCode acts\nacceptable, but nothing more than that. When I first started implementing my\nchallenge, I downloaded the Vim emulator plugin that enables some of the\nshortcuts. Using this with the F1 toolbar (similar to Ctrl + P in Atom - fuzzy\nfile finder and quick command access) I was able to last a couple of weeks, but\nI saw that this wasn't a long term solution. Too often I'd need to use the\nmouse to perform an action that the solutions I used at the time weren't\ncovering. For this reason I switched to "),t("a",{attrs:{href:"https://www.vim.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vim"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("I really don't think I need to write a lot about Vim's functionalities since\nits reputation precedes it. I must say, however, that the learning curve was a\nlot milder than I expected. It took me a couple of days to set up initial\nplugins and dotfiles and about a week to get used to basic workflow in the\neditor itself. I kept updating my setup and learning new command combinations\nafterwards without much pain. Also, using tmux alongside for quick switching\nfrom and to other terminals proved to be essential.")]),e._v(" "),t("p",[e._v("I didn't try many alternatives to Vim, when it comes to terminal based editors,\nbut I must say I'm quite pleased with the Vim community since if offers so\nmuch. There are many user written\n"),t("a",{attrs:{href:"https://vim.fandom.com/wiki/Vim_Tips_Wiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("tutorials"),t("OutboundLink")],1),e._v(" and even\n"),t("a",{attrs:{href:"https://www.amazon.com/Practical-Vim-Edit-Speed-Thought/dp/1680501275",target:"_blank",rel:"noopener noreferrer"}},[e._v("books"),t("OutboundLink")],1),e._v("\nabout using Vim, which I don't think any other editor has at this level.")]),e._v(" "),t("p",[e._v("People often ask me whether Vim was an overkill in my challenge, but I couldn't\ndisagree more. When an editor forces you to communicate with it solely through\narrays of symbols, this communication grows almost into a language of a sort.\nOften times when using Vim, I'd get astonished at the amount of power and\ncontrol I have over my code with well selected commands. This, I'd say, is my\nmain reason why Vim is currently my favourite editor.")]),e._v(" "),t("p",[e._v("Plus, you get to make fun of people whose editors are\n"),t("a",{attrs:{href:"https://github.com/ealter/vim_turing_machine",target:"_blank",rel:"noopener noreferrer"}},[e._v("not Turing complete"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h1",{attrs:{id:"conclusion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),t("p",[e._v("So far, my experiences with the mouseless work have been fun. I can definitely\nsay I've tried out and learned new things. I have also seen disadvantages to\nthis kind of work, but it's all just a matter of different trade-offs.\nKeyboards offer you fast way of inputting textual commands, but sometimes you\nneed the almost pixel-wide precision a mouse offers. In any case, I'm\ncontinuing my challenge, hopefully until the end of the year, and updating this\npost in case I come up with something new. Also, in case anyone is actually\nreading this and has ideas I haven't tried out, let me know in the comments\nbelow.")]),e._v(" "),t("disqus")],1)}),[],!1,null,null,null);t.default=i.exports}}]);