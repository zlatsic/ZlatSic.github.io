(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{307:function(e,t,n){"use strict";n.r(t);var a=n(14),o=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"frontmatter-title"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),t("p",[e._v("For the last month I've been busy switching from jekyll to the current\nimplementation, in vuepress. Here I will describe the reasoning, the process\nand main benefits up until now.")]),e._v(" "),t("h2",{attrs:{id:"motivation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),t("p",[e._v("I wanted to add Google Analytics to my jekyll site and it went well. Since I\nused the mmistakes theme, its configuration lets you add this easily. The\nproblem came when I realized that I should probably also add the cookie policy\nand popup to the site.")]),e._v(" "),t("p",[e._v("This was somewhat of a problem as I needed to dig deeper into the theme and\nmake the changes. I found a neat post explaining the process, however,\nunfortunately, I still haven't managed to do it.")]),e._v(" "),t("p",[e._v("Minimal mistakes is a beautiful theme, but I had some minor annoyances with it,\nautomatic updating of the URL while you scroll being the worst one (completely\nbreaks the back button). I looked for a way to remove the configuration option,\nbut haven't managed to find it.")]),e._v(" "),t("h2",{attrs:{id:"vuepress"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vuepress"}},[e._v("#")]),e._v(" Vuepress")]),e._v(" "),t("p",[e._v("I have some experience working with Vue.js and was excited to see that it has\nits very own static site generator. Upon digging in, I realized that it fits my\nneeds perfectly, allowing basic static site generation features, but also\nletting its users write their own Vue components. I started up the tutorial and\nmanaged to relatively simply convert my exsiting jekyll blog into Vuepress. I\ndid find the documentation to be lacking some information, as it is mostly\nwritten as a tutorial, not displaying some more advanced options I might have\nwanted to use. So here I will document my journey and biggest blockers I\nencountered, in case it helps anyone else going through something similar.")]),e._v(" "),t("h3",{attrs:{id:"asset-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#asset-management"}},[e._v("#")]),e._v(" Asset management")]),e._v(" "),t("p",[e._v("One difference from jekyll is the way assets are handled, and it took me a\nwhile figuring this out. In jekyll, you place your assets into an assets\ndirectory and access them from your markdown as if they were in the site's\nroot. In vuepress, this does not quite work that way, as assets need to be\nplaced into a public directory. The users also have the option of placing their\nassets alongside markdown, allowing only that markdown file to have access to\nthem. This option actually proved to be better and I ended up using it, since\nthat way the assets are neatly organized and are still grouped into a common\nassets directory after the site is built.")]),e._v(" "),t("p",[e._v("For example, let's take a look at my portfolio post about "),t("RouterLink",{attrs:{to:"/portfolio/light_control/"}},[e._v("using CV for light\ncontrol")]),e._v(".  The structure of the source directory\ncan be seen\n"),t("a",{attrs:{href:"https://github.com/ZlatSic/ZlatSic.github.io/tree/master/docs/portfolio/light_control",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(".\nSo the images are in the "),t("code",[e._v("images")]),e._v(" directory and they are accessed from the\n"),t("code",[e._v("readme.md")]),e._v(" using a relative path. When vuepress site is built, the assets are\ntransferred into a common assets directory, seen\n"),t("a",{attrs:{href:"https://github.com/ZlatSic/ZlatSic.github.io/tree/gh-pages/assets/img",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(",\nare given unique names and the links in the built HTML file are adapted to the\nnew locations. This way the assets are placed conveniently near the markdown\nfiles that use them, but the built site still follows conventional directory\nstructure.")],1),e._v(" "),t("p",[e._v('This approach, however, is not without its own problems - one that I ran into\nrelatively fast was how to have "local" non-image assets? I wanted to add a pdf\nversion of my CV, but, for the life of it, could not figure out how to add a\npdf asset. This is still an ongoing issue and if anyone knows the solution,\nfeel free to answer the '),t("a",{attrs:{href:"https://stackoverflow.com/questions/66318959/vuepress-download-link-for-a-file-with-relative-path",target:"_blank",rel:"noopener noreferrer"}},[e._v("stackoverflow question"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"custom-components"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#custom-components"}},[e._v("#")]),e._v(" Custom components")]),e._v(" "),t("p",[e._v("Pretty fast I realized that the components available by the default are not\nenough for my needs. I needed a footer containing my social info, comment\nsection, custom post feeds and various smaller widgets. This was where vuepress\nreally shined because addition of these components is trivial. It basically\ncomes down to implementing a Vue component with wanted behavior and including\nit into markdown where needed. Markdown pareser vuepress uses can also parse\nand render HTML, so this inclusion is simple, for instance, this is what my\nmarkdown looks like if I want to include a comment section at the end (if the\ncomponent's name is disqus):")]),e._v(" "),t("div",{staticClass:"language-markdown extra-class"},[t("pre",{pre:!0,attrs:{class:"language-markdown"}},[t("code",[e._v("Some regular markdown text\n\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("disqus")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/>")])]),e._v("\n")])])]),t("p",[e._v("The footer was a bit more difficult to add, I first needed to wrap the default\ntheme with my custom global layout that would act as a wrapper and add custom\nfooter HTML to the bottom. Luckily, this process was "),t("a",{attrs:{href:"https://vuepress.vuejs.org/theme/option-api.html#globallayout",target:"_blank",rel:"noopener noreferrer"}},[e._v("well\ndocumented"),t("OutboundLink")],1),e._v(', as\nit is probably a common use case. This is however labeled as "Danger zone" in\nthe documentation, so I might switch to a more sustainable approach, if this\none proves to be bad in the long run.')]),e._v(" "),t("h3",{attrs:{id:"themes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#themes"}},[e._v("#")]),e._v(" Themes")]),e._v(" "),t("p",[e._v("I like vuepress' default theme, it is very minimalistic and clean. However, I\ndidn't like that there's no dark mode option, so I set onto a journey to figure\nout how to achieve this. I was first very inspired and even decided to try\nmaking my own theme and this proved to be a bit more difficult than I had\nimagined. I won't say that creating my own theme was an impossible goal, it was\njust biting off more than I could (or wanted) to chew.")]),e._v(" "),t("p",[e._v("Writing a theme can be a tedious affair, and I probably wouldn't recommend it\nto someone just getting started with the framework and just wanting to focus on\ncreating content. There was a lot of small details that seemed really appealing\nto add, but the amount of work needed to implement them seemed overwhelming,\nall while the default theme had those details covered. This is, for instance,\nthe search function, responsive navigation adjustment, the main page... These\ndetails are somewhat insignificant on their own, but add them together and the\nfinal product is just somewhat hollow. So I decided to, for now, use the\ndefault theme and leave the development of my own theme for better days.")]),e._v(" "),t("p",[e._v("The default theme, even though it is already set, is somewhat configurable. So\nI was able to make some changes, like switching link colors from Vue's green to\nmaroon. There are also options that allow users to inherit themes, meaning I\ncould, at any point just inherit the default theme and adapt it to my liking.")]),e._v(" "),t("h3",{attrs:{id:"plugins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugins"}},[e._v("#")]),e._v(" Plugins")]),e._v(" "),t("p",[e._v("This is a topic I haven't yet explored fully. Vuepress can be extended with\nvarious plugins, allowing users to avoid having to make their own\nimplementation. So, for instance, if I didn't want to make my own disqus\ncomment section widget, I could have added a vuepress disqus plugin with my\npackage manager, configure my project to use the plugin and call it where\nneeded.")]),e._v(" "),t("p",[e._v("Another plugin I tried to make work is one for Google Analytics, the very straw\nthat broke the camel's back and made me switch to vuepress. For now, it seems\nit is configured, but don't see any references to it in the virtual DOM of my\nwebsite and my activities are not visible on GA's dashboard, so I'm assuming\nI'm doing something wrong. I've only just recently started setting it up, so\nthat's probably the reason.")]),e._v(" "),t("h2",{attrs:{id:"conclusion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),t("p",[e._v("That's about it for the biggest problems and features I encountered so far. For\nnow, I really like the generator and plan to keep using it for a while, despite\nsome of the early drawbacks.")]),e._v(" "),t("disqus")],1)}),[],!1,null,null,null);t.default=o.exports}}]);