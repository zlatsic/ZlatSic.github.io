(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{304:function(e,t,n){e.exports=n.p+"assets/img/cloud_run1.73d21e4b.png"},305:function(e,t,n){e.exports=n.p+"assets/img/cloud_build1.74556198.png"},306:function(e,t,n){e.exports=n.p+"assets/img/cloud_build2.0e72295a.png"},307:function(e,t,n){e.exports=n.p+"assets/img/cloud_build3.d1837c0a.png"},308:function(e,t,n){e.exports=n.p+"assets/img/domains1.254bdf86.png"},309:function(e,t,n){e.exports=n.p+"assets/img/domains2.b0d10e42.png"},310:function(e,t,n){e.exports=n.p+"assets/img/domains3.c3015af4.png"},334:function(e,t,n){"use strict";n.r(t);var i=n(15),s=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"frontmatter-title"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),t("p",[e._v("Earlier this year I have switched from hosting this site on GitHub pages to the\nGoogle Cloud Platform (GCP). While I admit that this might be an overkill for a\nsimple blog/portfolio site, this was mostly for educational purposes and it\nserved those purposes well. To add, since I barely get any traffic here, GCP is\neffectively free.")]),e._v(" "),t("p",[e._v("The experience taught me to deploy custom Docker-based applications, assign\ndomains to them, and set up pipelines for continuous deployment of the whole\nproject. In this post I will go over the details of the whole setup.")]),e._v(" "),t("h2",{attrs:{id:"dockerizing-the-site"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerizing-the-site"}},[e._v("#")]),e._v(" Dockerizing the site")]),e._v(" "),t("p",[e._v("This was probably the simplest part of the setup - I needed to host this site\nin a Docker container. For the image I chose nginx, as I also need a proper\nserver to host everything. Regarding content, it is static files, so no complex\nrouting or reverse proxy rules were needed.")]),e._v(" "),t("p",[e._v("The Dockerfile ended up installing dependencies and building the vuepress\nproject, "),t("a",{attrs:{href:"https://github.com/zlatsic/ZlatSic.github.io/blob/master/Dockerfile",target:"_blank",rel:"noopener noreferrer"}},[e._v("available in the\nrepo"),t("OutboundLink")],1),e._v(". The\n"),t("a",{attrs:{href:"https://github.com/zlatsic/ZlatSic.github.io/blob/master/nginx.conf",target:"_blank",rel:"noopener noreferrer"}},[e._v("nginx\nconfiguration"),t("OutboundLink")],1),e._v("\nis also copied, and the project is build to the location where nginx expects\nthe files. Nginx is expected to be ran with the default settings, while its\nconfiguration is overwritten. Make sure to either run the nginx on port 8080,\nor set the envorinoment variable "),t("code",[e._v("$PORT")]),e._v(" to the port number of the site (or set\nup GCP Cloud run to the correct port).")]),e._v(" "),t("h2",{attrs:{id:"setting-up-cloud-run"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-cloud-run"}},[e._v("#")]),e._v(" Setting up Cloud run")]),e._v(" "),t("p",[e._v("GCP Cloud run is a service that hosts a containerized app. The service can be\nconfigured to use a custom docker image (providing an URL to, e.g. dockerhub),\nor by building an image from a source repository. Configuration allows users to\nspecify how many containers can run in parallel, how many requests per\ncontainer, etc.")]),e._v(" "),t("p",{attrs:{align:"center"}},[t("img",{attrs:{src:n(304),alt:"drawing",width:"50%"}})]),e._v(" "),t("p",[e._v("For my setup, I chose building from the source, with appropriate limitations to\nthe number of requests and containers. Since I am building from source, and I\nhaven't connected my source repo with the Cloud run instance, I still couldn't\naccess the built site, but this will change in the next step. Notice that the\nnew service cannot be created, before clicking and setting up Cloud build.")]),e._v(" "),t("h2",{attrs:{id:"setting-up-cloud-build"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-cloud-build"}},[e._v("#")]),e._v(" Setting up Cloud build")]),e._v(" "),t("p",[e._v('Clicking the "Set up with Cloud build" button allows creation of a new\ndepoloyment pipeline. This pipeline will connect the repo with the Cloud run\ninstance and, on different trigger events, the repo will be checked out, built,\nand used by the service.')]),e._v(" "),t("p",{attrs:{align:"center"}},[t("img",{attrs:{src:n(305),alt:"drawing",width:"50%"}})]),e._v(" "),t("p",[e._v("Different trigger events can be set up, the simples one for my purposes being\non push events to the master or some other branch. This also requires setting\nup the GitHub end, but that mostly meant just giving GCP application access to\nthe repo.")]),e._v(" "),t("p",[e._v("These pipelines can be configured in different ways, I ended up using the Cloud\nBuild configuration file, written inline in the app, because that allowed me to\nsimply use default settings. The file can also be edited in the browser app.")]),e._v(" "),t("p",{attrs:{align:"center"}},[t("img",{attrs:{src:n(306),alt:"drawing",width:"50%"}})]),e._v(" "),t("p",[e._v("After this step, the Cloud run service setup can be completed. After the\nservice is created, its dashboard will be opened. Wait until the configured\nbuild process completes. If interested, its console output should be available\nin the Cloud build dashboard.")]),e._v(" "),t("p",{attrs:{align:"center"}},[t("img",{attrs:{src:n(307),alt:"drawing"}})]),e._v(" "),t("p",[e._v('After the build is completed, on the Cloud run service dashboard, there should\nbe a field named "URL", which is the URL at which the newly deployed app can be\naccessed. This address is set up internally by GCP, looking something like\n'),t("code",[e._v("https://service-name-instance-id-ez.a.run.app/")]),e._v(". Normally, we don't want our\nservice to be hosted on such an unusual domain, so we need to set up our own.")]),e._v(" "),t("h2",{attrs:{id:"domains"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#domains"}},[e._v("#")]),e._v(" Domains")]),e._v(" "),t("p",[e._v('The domain setup is relatively straight forward - next to the URL field in the\nCloud run dashboard, there is a small rounded, clickable "i" sign, that shows\nmore domain details when opened. It also allows custom domain management.')]),e._v(" "),t("p",{attrs:{align:"center"}},[t("img",{attrs:{src:n(308),alt:"drawing",width:"30%"}})]),e._v(" "),t("p",{attrs:{align:"center"}},[t("img",{attrs:{src:n(309),alt:"drawing",width:"50%"}})]),e._v(" "),t("p",{attrs:{align:"center"}},[t("img",{attrs:{src:n(310),alt:"drawing",width:"50%"}})]),e._v(" "),t("p",[e._v("Custom domains are defined as mappings between the service and the domain.\nWrite the name of the domain and verify it by following the described steps\n(this will involve some actions on yout domain provider's side). After the\ndomain is verified, DNS records need to be set up. I set up my A and AAAA\nrecords after looking up the addresses for GCP.")]),e._v(" "),t("p",[e._v("After that, everything should be set up and the app available over the\nconfigured domain. Enjoy your hosted service!")]),e._v(" "),t("h1",{attrs:{id:"conclusion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),t("p",[e._v("As mentioned in the intro, this was more of an educational experience than an\nactual technical need. Still, it has some very concrete, educational use. This\nwill work with any application that can be hosted in a docker container, unlike\nGithub pages which acts as a static file server. Continuing the education, I\nwould perhaps like to extend my experience by using fewer GUI tools and\nfocusing on the CLI. This would also include configuring everything over YAML\nfiles in the repo.")]),e._v(" "),t("disqus")],1)}),[],!1,null,null,null);t.default=s.exports}}]);