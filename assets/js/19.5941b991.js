(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{307:function(e,t,n){"use strict";n.r(t);var o=n(14),a=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"frontmatter-title"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),t("p",[e._v("As I'm relaxing on my Christmas break I giving myself an overview of all the\nnew things I learned over this year. It turned out to be more difficult than I\nanticipated, motivating me to write a more detailed overview. It seems like a\ngood idea to do this every winter break so I might do it in the following\nyears, as well.")]),e._v(" "),t("h2",{attrs:{id:"docker-improvements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-improvements"}},[e._v("#")]),e._v(" Docker improvements")]),e._v(" "),t("p",[e._v("In 2021 I started to work more seriously with docker containers, as one of the\nproducts we developed had a distribution in the form of a container. This year\nI took it further and focused on using docker compose, to orchestrate multiple\ncontainers at the same time. This proved to be useful knowledge for my current\npostion, but also for some interview assignments I took and implemented.")]),e._v(" "),t("p",[e._v("There are several motivations to compose multiple docker container instances.\nThe main one is organization - shoving all components into a single image can\nbe difficult from this standpoint. An additional advantage to composing that I\nfound is that it is actually one of the first points where applications can be\nscaled. The interface that it provides to users allows them to run an arbitrary\namount of container instances, simulating horizontal scaling.")]),e._v(" "),t("p",[e._v("I am very glad to have access to this new tool, but I still see some potential\nfor improvements in this realm in general. Kubernetes seem like a natural\nprogression from this point and I hope to have a chance to use them in my\nfuture projects. I have also tried using GCP to host a docker image, which, if\nyou're reading this post, still works great.")]),e._v(" "),t("h2",{attrs:{id:"python-frameworks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python-frameworks"}},[e._v("#")]),e._v(" Python frameworks")]),e._v(" "),t("p",[e._v("This year I managed to further improve my understanding of\n"),t("a",{attrs:{href:"https://flask.palletsprojects.com/en/2.2.x/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Flask"),t("OutboundLink")],1),e._v(" and also tried out\n"),t("a",{attrs:{href:"https://fastapi.tiangolo.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("FastAPI"),t("OutboundLink")],1),e._v('. I have had some prior experience with\nFlask, but this year I developed several projects with it. The two main ones\nwere for my job and for a job interview project that I developed. Using Flask\nonly further reaffirmed why I prefer working with microframeworks as they feel\nlike they give me a large amount of control, while taking care of the "boring"\nstuff.')]),e._v(" "),t("p",[e._v("I wanted to try out FastAPI since I talked to some developers that have it in\ntheir tech stack, and I was pleasantly suprised. Since I already liked Flask\nand FastAPI has similar interfaces, I naturally also enjoyed working with it. A\nrelatively new concept, at least in the Python world, was the use of dependency\ninversion using the "),t("code",[e._v("Depends")]),e._v(" class. I found the whole implementation to be\nreally elegant and hope to get a chance to further use it in some of my later\nprojects.")]),e._v(" "),t("h2",{attrs:{id:"openai-apis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#openai-apis"}},[e._v("#")]),e._v(" OpenAI APIs")]),e._v(" "),t("p",[e._v("Over the last month there was a whole uproar over the newly released\n"),t("a",{attrs:{href:"https://chat.openai.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ChatGPT"),t("OutboundLink")],1),e._v(" beta. Since I also found it fascinating,\nand I have a technical background, my social networks started showing me ads\nfor AI hackatons that encourage the use of such tech. I ran into a\n"),t("a",{attrs:{href:"https://lablab.ai",target:"_blank",rel:"noopener noreferrer"}},[e._v("lablab.ai"),t("OutboundLink")],1),e._v(" competition that revloved around using\n"),t("a",{attrs:{href:"https://openai.com/blog/whisper/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Whisper"),t("OutboundLink")],1),e._v(",\n"),t("a",{attrs:{href:"https://openai.com/blog/openai-codex/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Codex"),t("OutboundLink")],1),e._v(", "),t("a",{attrs:{href:"https://beta.openai.com/docs/guides/completion",target:"_blank",rel:"noopener noreferrer"}},[e._v("text\ncompletion"),t("OutboundLink")],1),e._v(", or\n"),t("a",{attrs:{href:"https://openai.com/dall-e-2/",target:"_blank",rel:"noopener noreferrer"}},[e._v("DALL-E"),t("OutboundLink")],1),e._v(". I figured why not, and enrolled.")]),e._v(" "),t("p",[e._v("Unfortunately, I haven't made a submission to the competition as I didn't have\ntime to implement a rounded product, but still had time to play around with\nsome of the APIs, mainly text completion and DALL-E. Both of these APIs are\nHTTP based and there is a Python implementation by OpenAI that can be used for\nsimpler access.")]),e._v(" "),t("p",[e._v('The simplest use case for the text completion API is giving it a simple\nprommpt and awaiting a response to it. The prompt can, for instance, be\n"Summarize this paragraph in 10 words:", followed by a long paragraph, and the\nmodel will return the summary. Another, even simpler way to use this model is\nby starting to write a story, stopping midway, and seeing how the model will\ncontinue. The API also allows some more advanced techniques, like further model\nfitting, where users can give prompt-continuation pairs, and the API will train\na custom model using that data.')]),e._v(" "),t("p",[e._v("DALL-E is an image generation and manipulation model. Its API takes a prompt\nand returns an image that corresponds to that prompt. The prompt can be\nanything, from a random sentance to instructions on the artistic style that\nneeds to be employed. DALL-E API also has an interface for image manipulation,\nwhere users can provide an image, label areas of the image, and using a prompt\nmodify the labeled areas, like inserting new components.")]),e._v(" "),t("p",[e._v("Since my time working with this tech was mostly cut short from other\nobligations, I still feel the need to keep trying it out and hopefully, in the\nfuture, there will still be opportunities to use this in concrete projects.\nThere are new similar hackatons on horizon, so new opportunities will surely\narise.")]),e._v(" "),t("h2",{attrs:{id:"go"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go"}},[e._v("#")]),e._v(" Go")]),e._v(" "),t("p",[e._v("Near the end of the year I have accepted a new job offer where Python is still\nthe main programming language, but "),t("a",{attrs:{href:"https://go.dev/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Go"),t("OutboundLink")],1),e._v(" is also used for\nperformance-heavy operations. This motivated me to start learning it even\nbefore starting with the role and it has been a positive experience so far.")]),e._v(" "),t("p",[e._v("It was a bit unusual to go back to a compiled, statically typed language, but\nGo makes it as painless as possible with its dynamic type assignment. Another\n\"big\" shock was lack of classes, but structures with their receiver methods\nseem to be a satisfactory replacement. I haven't fully utilized object-oriented\ndesign in Python anyway, so I won't be missing things like inheritance too\nmuch.")]),e._v(" "),t("p",[e._v("Go's design philosophy seems to go well with the ideas I've learned over the\nlast 6 years, with prioretization of working with immutable data structures or\nallergy to using shared memory to communicate between different system\ncomponents.")]),e._v(" "),t("p",[e._v("I still haven't written a larger project in Go, but this might change soon, as\nI do have some ideas for different services. Some of them might be\nimplementable with this language, so it might be worth giving a shot. I also\nsolve Advent of Code, and might translate some of my Python solutions into Go.\nI would still like to see a practical, web-based service using Go so this would\nprobably not be enough.")]),e._v(" "),t("h1",{attrs:{id:"conclusion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),t("p",[e._v("It was a good year where I've finally addressed some tech I probably should\nhave tried out much earlier. Still, there is a lot of room for improvement,\nboth with all of the mentioned tech and with new tools I haven't tried out yet.\nI already mentioned Kubernetes as one such potential tool, there are probably\nadditional ones that could be useful as well.")]),e._v(" "),t("p",[e._v("This year has been a bit poor when it comes to databases and different key\nstores, which I hope to remedy in the next year as well. Lastly, I'm not much\nof a frontend developer, but I still like to try out a new framework every now\nand then. My main frontend framework up to this point has been Vue, but I'm\nnoticing a trend where more and more devs are using Svelte, so it might be\ninteresting to try that out, as well. Since I am chainging jobs at the start of\nthe next year, I am very optimistic and have no question I will get to work\nwith at least some of these technologies.")]),e._v(" "),t("disqus")],1)}),[],!1,null,null,null);t.default=a.exports}}]);